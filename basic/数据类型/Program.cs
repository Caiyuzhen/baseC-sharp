/* 	
		数据类型分为【值类型】 跟 【引用类型】 
*/

// 【值类型】 - 整数 ————————————————————————————————————————————————————————————————
// ⚡️有符号整数可以表示正数、负数和零，而无符号整数只能表示非负数和零
byte numG = 40; // 有符号的 8 位整数 
sbyte numH = 40; // 无符号的 8 位整数, 取值范围 -128 ~ 127

short numA = 40; // 有符号的 16 位整数, 取值范围 -32768 ~ 32767
ushort numD = 40; // 无符号的 16 位整数, 取值范围 0 ~ 65535

int numB = 40; // 有符号的 32 位整数 , 取值范围 -2147483648 ~ 2147483647	// 🌟 常用
uint numC = 40u; // 无符号的 32 位整数, 取值范围 0 ~ 4294967295

long numE = 40L; // 有符号的 64 位整数, 取值范围 -9223372036854775808 ~ 9223372036854775807 // 🌟 常用
ulong numF = 40UL; // 无符号的 64 位整数, 取值范围 0 ~ 18446744073709551615
Console.WriteLine("{0} {1} {2} {3} {4} {5}", numA, numB, numC, numD, numE, numF, numF);



// 【值类型】 - 浮点(带有小数点) ————————————————————————————————————————————————————————————————
float numI = 40.5f; // 【单精度, 需要加个 f 】浮点数, 占用 32 位空间, 4 个字节, 取值范围 -3.402823E+38 ~ 3.402823E+38
double numJ = 40.5; // 【双精度】浮点数, 占用 64 位空间, 8 个字节, 取值范围 -1.7976931348623157E+308 ~ 1.7976931348623157E+308
Console.WriteLine("{0} {1}", numI, numJ);



// 【字符类型】 ————————————————————————————————————————————————————————————————
char numK = 'A'; // 表示一个 16 位的 Unicode 字符, 单引号
string str = "Hello"; // 表示一个字符串, 双引号
Console.WriteLine("{0} {1}", numK, str);



// 【布尔类型】 ————————————————————————————————————————————————————————————————
bool result = true;
bool result2 = false;
Console.WriteLine("{0} {1}", result, result2);


// 【结构体类型】 ————————————————————————————————————————————————————————————————
// 结构体是一种【值类型】, 类是一种【引用类型】
Person Designer = new Person(); //【🔥要放到 struct 的声明之前🔥】实例化一个结构体
Designer.Name = "Jimmy";
Designer.Age = "18";
Console.WriteLine(Designer.Name);

public struct Person {
	public string Name;
	public string Age;
}


